// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/average.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AverageServiceClient is the client API for AverageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AverageServiceClient interface {
	// Client Streaming
	FindAverage(ctx context.Context, opts ...grpc.CallOption) (AverageService_FindAverageClient, error)
}

type averageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAverageServiceClient(cc grpc.ClientConnInterface) AverageServiceClient {
	return &averageServiceClient{cc}
}

func (c *averageServiceClient) FindAverage(ctx context.Context, opts ...grpc.CallOption) (AverageService_FindAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &AverageService_ServiceDesc.Streams[0], "/proto.AverageService/FindAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &averageServiceFindAverageClient{stream}
	return x, nil
}

type AverageService_FindAverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type averageServiceFindAverageClient struct {
	grpc.ClientStream
}

func (x *averageServiceFindAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *averageServiceFindAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AverageServiceServer is the server API for AverageService service.
// All implementations must embed UnimplementedAverageServiceServer
// for forward compatibility
type AverageServiceServer interface {
	// Client Streaming
	FindAverage(AverageService_FindAverageServer) error
	mustEmbedUnimplementedAverageServiceServer()
}

// UnimplementedAverageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAverageServiceServer struct {
}

func (UnimplementedAverageServiceServer) FindAverage(AverageService_FindAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAverage not implemented")
}
func (UnimplementedAverageServiceServer) mustEmbedUnimplementedAverageServiceServer() {}

// UnsafeAverageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AverageServiceServer will
// result in compilation errors.
type UnsafeAverageServiceServer interface {
	mustEmbedUnimplementedAverageServiceServer()
}

func RegisterAverageServiceServer(s grpc.ServiceRegistrar, srv AverageServiceServer) {
	s.RegisterService(&AverageService_ServiceDesc, srv)
}

func _AverageService_FindAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AverageServiceServer).FindAverage(&averageServiceFindAverageServer{stream})
}

type AverageService_FindAverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type averageServiceFindAverageServer struct {
	grpc.ServerStream
}

func (x *averageServiceFindAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *averageServiceFindAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AverageService_ServiceDesc is the grpc.ServiceDesc for AverageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AverageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AverageService",
	HandlerType: (*AverageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAverage",
			Handler:       _AverageService_FindAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/average.proto",
}
