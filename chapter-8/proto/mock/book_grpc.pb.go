// Code generated by MockGen. DO NOT EDIT.
// Source: chapter-8/proto/book_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/HiteshRepo/Modern-API-Design-with-gRPC/chapter-8/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBookServiceClient is a mock of BookServiceClient interface.
type MockBookServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceClientMockRecorder
}

// MockBookServiceClientMockRecorder is the mock recorder for MockBookServiceClient.
type MockBookServiceClientMockRecorder struct {
	mock *MockBookServiceClient
}

// NewMockBookServiceClient creates a new mock instance.
func NewMockBookServiceClient(ctrl *gomock.Controller) *MockBookServiceClient {
	mock := &MockBookServiceClient{ctrl: ctrl}
	mock.recorder = &MockBookServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceClient) EXPECT() *MockBookServiceClientMockRecorder {
	return m.recorder
}

// ListBooks mocks base method.
func (m *MockBookServiceClient) ListBooks(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.ListBooksRespose, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBooks", varargs...)
	ret0, _ := ret[0].(*proto.ListBooksRespose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookServiceClientMockRecorder) ListBooks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookServiceClient)(nil).ListBooks), varargs...)
}

// MockBookServiceServer is a mock of BookServiceServer interface.
type MockBookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceServerMockRecorder
}

// MockBookServiceServerMockRecorder is the mock recorder for MockBookServiceServer.
type MockBookServiceServerMockRecorder struct {
	mock *MockBookServiceServer
}

// NewMockBookServiceServer creates a new mock instance.
func NewMockBookServiceServer(ctrl *gomock.Controller) *MockBookServiceServer {
	mock := &MockBookServiceServer{ctrl: ctrl}
	mock.recorder = &MockBookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceServer) EXPECT() *MockBookServiceServerMockRecorder {
	return m.recorder
}

// ListBooks mocks base method.
func (m *MockBookServiceServer) ListBooks(arg0 context.Context, arg1 *proto.Empty) (*proto.ListBooksRespose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListBooksRespose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookServiceServerMockRecorder) ListBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookServiceServer)(nil).ListBooks), arg0, arg1)
}

// mustEmbedUnimplementedBookServiceServer mocks base method.
func (m *MockBookServiceServer) mustEmbedUnimplementedBookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookServiceServer")
}

// mustEmbedUnimplementedBookServiceServer indicates an expected call of mustEmbedUnimplementedBookServiceServer.
func (mr *MockBookServiceServerMockRecorder) mustEmbedUnimplementedBookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookServiceServer", reflect.TypeOf((*MockBookServiceServer)(nil).mustEmbedUnimplementedBookServiceServer))
}

// MockUnsafeBookServiceServer is a mock of UnsafeBookServiceServer interface.
type MockUnsafeBookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBookServiceServerMockRecorder
}

// MockUnsafeBookServiceServerMockRecorder is the mock recorder for MockUnsafeBookServiceServer.
type MockUnsafeBookServiceServerMockRecorder struct {
	mock *MockUnsafeBookServiceServer
}

// NewMockUnsafeBookServiceServer creates a new mock instance.
func NewMockUnsafeBookServiceServer(ctrl *gomock.Controller) *MockUnsafeBookServiceServer {
	mock := &MockUnsafeBookServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBookServiceServer) EXPECT() *MockUnsafeBookServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBookServiceServer mocks base method.
func (m *MockUnsafeBookServiceServer) mustEmbedUnimplementedBookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookServiceServer")
}

// mustEmbedUnimplementedBookServiceServer indicates an expected call of mustEmbedUnimplementedBookServiceServer.
func (mr *MockUnsafeBookServiceServerMockRecorder) mustEmbedUnimplementedBookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookServiceServer", reflect.TypeOf((*MockUnsafeBookServiceServer)(nil).mustEmbedUnimplementedBookServiceServer))
}
